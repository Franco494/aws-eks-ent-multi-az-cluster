resource "aws_config_configuration_recorder" "eks_compliance" {
  name     = "${var.cluster_name}-compliance-recorder"
  role_arn = aws_iam_role.config.arn

  recording_group {
    all_supported                 = true
    include_global_resource_types = true
  }
}

resource "aws_config_delivery_channel" "eks_compliance" {
  name           = "${var.cluster_name}-compliance-channel"
  s3_bucket_name = aws_s3_bucket.compliance_logs.bucket
}

resource "aws_s3_bucket" "compliance_logs" {
  bucket        = "${var.cluster_name}-compliance-logs-${random_id.compliance_suffix.hex}"
  force_destroy = false
  tags          = var.tags
}

resource "aws_s3_bucket_server_side_encryption_configuration" "compliance_logs" {
  bucket = aws_s3_bucket.compliance_logs.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = var.kms_key_arn != "" ? var.kms_key_arn : null
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_iam_role" "config" {
  name = "${var.cluster_name}-config-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "config.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

resource "aws_iam_role_policy_attachment" "config" {
  role       = aws_iam_role.config.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/ConfigRole"
}

resource "aws_config_config_rule" "root_access_key_check" {
  name = "${var.cluster_name}-root-access-key-check"

  source {
    owner             = "AWS"
    source_identifier = "ROOT_ACCESS_KEY_CHECK"
  }

  depends_on = [aws_config_configuration_recorder.eks_compliance]
}

resource "aws_config_config_rule" "encrypted_volumes" {
  name = "${var.cluster_name}-encrypted-volumes"

  source {
    owner             = "AWS"
    source_identifier = "ENCRYPTED_VOLUMES"
  }

  depends_on = [aws_config_configuration_recorder.eks_compliance]
}

resource "random_id" "compliance_suffix" {
  byte_length = 4
}